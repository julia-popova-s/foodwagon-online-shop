{"version":3,"file":"static/js/899.a8410791.chunk.js","mappings":"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","sources":["webpack://foodwagon_project/./src/components/pages/LoginPage/authRegForm.module.scss?23ee","components/pages/LoginPage/AuthRegForm.js","components/pages/LoginPage/SignUpPage.js","utils/utilsForForm/fieldValidationSchemes.js","utils/utilsForForm/regExpPassword.js","utils/utilsForForm/regExpEmail.js.js","webpack://foodwagon_project/./src/components/pages/LoginPage/loginPage.module.scss?866f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"regForm\":\"authRegForm_regForm__LB12J\",\"regForm__link\":\"authRegForm_regForm__link__XkehT\",\"regForm__linkTo\":\"authRegForm_regForm__linkTo__KaGpJ\",\"regForm__title\":\"authRegForm_regForm__title__lTvWR\",\"regForm__input\":\"authRegForm_regForm__input__MKK6C\",\"regForm__label\":\"authRegForm_regForm__label__CMx0w\",\"regForm__button\":\"authRegForm_regForm__button__mLIWQ\",\"regForm__error\":\"authRegForm_regForm__error__otNEP\",\"regForm__isValid\":\"authRegForm_regForm__isValid__7iyqa\",\"formWrapper\":\"authRegForm_formWrapper__+ammY\"};","import { yupResolver } from '@hookform/resolvers/yup';\r\nimport cn from 'classnames';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport style from './authRegForm.module.scss';\r\n\r\nfunction AuthRegForm({ errorMessage, handleClick, schema, title }) {\r\n  const {\r\n    control,\r\n    formState: { errors, isValid },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm({\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    mode: 'onBlur',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const onSubmit = ({ email, password }) => {\r\n    handleClick(email, password);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div className={style.formWrapper}>\r\n      <form className={style.regForm} onSubmit={handleSubmit(onSubmit)}>\r\n        <p className={style.regForm__title}>{title}</p>\r\n\r\n        <p className={style.regForm__link}>\r\n          Or{' '}\r\n          <Link className={style.regForm__linkTo} to={title === 'Log in' ? '/register' : '/login'}>\r\n            {title === 'Log in' ? 'Sign up' : 'Log in'}\r\n          </Link>\r\n        </p>\r\n\r\n        <label className={style.regForm__label} htmlFor=\"email\">\r\n          Email address{' '}\r\n        </label>\r\n\r\n        <Controller\r\n          render={({ field }) => (\r\n            <input\r\n              className={style.regForm__input}\r\n              id=\"email\"\r\n              {...field}\r\n              aria-invalid={errors.email ? 'true' : 'false'}\r\n            />\r\n          )}\r\n          control={control}\r\n          name=\"email\"\r\n        />\r\n\r\n        <div className={style.regForm__error} role=\"alert\">\r\n          {errors.email?.message}{' '}\r\n        </div>\r\n\r\n        <label className={style.regForm__label} htmlFor=\"password\">\r\n          Password\r\n        </label>\r\n\r\n        <Controller\r\n          render={({ field }) => (\r\n            <input\r\n              className={style.regForm__input}\r\n              id=\"password\"\r\n              {...field}\r\n              aria-invalid={errors.password ? 'true' : 'false'}\r\n            />\r\n          )}\r\n          control={control}\r\n          name=\"password\"\r\n        />\r\n\r\n        <div className={style.regForm__error} role=\"alert\">\r\n          {errors.password?.message}\r\n        </div>\r\n\r\n        <input\r\n          className={cn(style.regForm__button, {\r\n            [style.regForm__isValid]: isValid,\r\n          })}\r\n          disabled={!isValid}\r\n          type=\"submit\"\r\n          value={title}\r\n        />\r\n\r\n        <div className={style.regForm__error} role=\"alert\">\r\n          {errorMessage && errorMessage}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default AuthRegForm;\r\n","import { createUserWithEmailAndPassword, getAuth } from 'firebase/auth';\r\nimport { Suspense, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport { setUser } from '../../../store/reducers/user';\r\nimport { signupSchema } from '../../../utils/utilsForForm/fieldValidationSchemes';\r\nimport Spinner from '../../ui/Spinner/Spinner';\r\nimport AuthRegForm from './AuthRegForm';\r\nimport style from './loginPage.module.scss';\r\n\r\nfunction SignUp() {\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const auth = getAuth();\r\n  const { pathname } = useLocation();\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const handleRegister = (email, password) => {\r\n    createUserWithEmailAndPassword(auth, email, password)\r\n      .then(({ user }) => {\r\n        dispatch(\r\n          setUser({\r\n            email: user.email,\r\n            id: user.uid,\r\n            token: user.accessToken,\r\n          }),\r\n        );\r\n        navigate('/');\r\n      })\r\n      .catch(({ code, message }) => {\r\n        switch (code) {\r\n          case 'auth/email-already-in-use':\r\n            setErrorMessage('This email address is already in use by another account.');\r\n            break;\r\n\r\n          default:\r\n            setErrorMessage(message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return (\r\n    <div className={style.login}>\r\n      <Suspense fallback={<Spinner />}>\r\n        <AuthRegForm errorMessage={errorMessage} handleClick={handleRegister} schema={signupSchema} title={'Sign Up'} />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\nexport default SignUp;\r\n","import * as yup from 'yup';\r\n\r\nimport { regExpEmail } from './regExpEmail.js';\r\nimport { regExpPassword } from './regExpPassword.js';\r\n\r\nexport const signupSchema = yup\r\n  .object({\r\n    email: yup\r\n      .string()\r\n      .matches(regExpEmail, {\r\n        excludeEmptyString: true,\r\n        message: 'email must be in a valid format',\r\n      })\r\n      .required(),\r\n    password: yup\r\n      .string()\r\n      .matches(regExpPassword, {\r\n        excludeEmptyString: true,\r\n        message: 'password should consist of letters, numbers, and symbols',\r\n      })\r\n      .required()\r\n      .min(8),\r\n  })\r\n  .required();\r\n\r\nexport const loginSchema = yup\r\n  .object({\r\n    email: yup\r\n      .string()\r\n      .matches(regExpEmail, {\r\n        excludeEmptyString: true,\r\n        message: 'email must be in a valid format',\r\n      })\r\n      .required(),\r\n    password: yup.string().required(),\r\n  })\r\n  .required();\r\n","export const regExpPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^\\w\\s])/g;\r\n","export const regExpEmail =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"loginPage_login__gZSDr\"};"],"names":["errorMessage","handleClick","schema","title","useForm","defaultValues","email","password","mode","resolver","yupResolver","control","formState","errors","isValid","handleSubmit","reset","className","style","onSubmit","to","htmlFor","render","field","id","name","role","message","cn","disabled","type","value","useState","setErrorMessage","auth","getAuth","pathname","useLocation","dispatch","useDispatch","navigate","useNavigate","useEffect","window","scrollTo","Suspense","fallback","createUserWithEmailAndPassword","then","user","setUser","uid","token","accessToken","catch","code","signupSchema","yup","matches","regExpEmail","excludeEmptyString","required","min","loginSchema"],"sourceRoot":""}